// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: DSLR.flex

package kela.plugins.drools.dslr.lang.lexer;

import com.intellij.psi.tree.IElementType;
import kela.plugins.drools.dslr.psi.DSLRTypes;
import com.intellij.psi.TokenType;
import java.util.Stack;


class DSLRLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int FILE_STATEMENT = 2;
  public static final int DECLARE = 4;
  public static final int QUERY = 6;
  public static final int RULE_HEADER = 8;
  public static final int RULE_LHS = 10;
  public static final int RULE_RHS = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\3\u0100\1\u0e00\205\u0100\1\u0600\1\u0100\1\u0f00\1\u1000\1\u1100"+
    "\1\u1200\54\u0100\10\u1300\37\u0100\1\u0900\4\u0100\1\u1400\10\u0100"+
    "\1\u1500\2\u0100\1\u1600\1\u1700\1\u1200\1\u0100\1\u0500\1\u0100"+
    "\1\u1800\1\u1500\1\u0800\3\u0100\1\u1100\1\u1900\114\u0100\1\u1a00"+
    "\1\u1100\153\u0100\1\u1b00\11\u0100\1\u1c00\1\u1200\6\u0100\1\u1100"+
    "\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\0\1\7\1\10\1\11\3\0\1\12\1\13\1\14"+
    "\1\0\1\15\1\16\1\0\1\17\1\20\1\21\1\22"+
    "\1\23\2\24\2\25\2\26\1\27\1\30\1\0\1\31"+
    "\1\0\1\32\1\0\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\0\1\45\1\46"+
    "\1\47\1\50\1\51\1\0\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\0\1\60\1\0\1\61\1\0\1\61"+
    "\3\0\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\0\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\0\1\61\1\0\1\61\7\0\1\3"+
    "\u01da\0\12\112\206\0\12\112\306\0\12\112\234\0\12\112"+
    "\166\0\12\112\140\0\12\112\166\0\12\112\106\0\12\112"+
    "\u0116\0\12\112\106\0\12\112\u0146\0\12\112\46\0\12\112"+
    "\u012c\0\12\112\200\0\12\112\246\0\12\112\6\0\12\112"+
    "\266\0\12\112\126\0\12\112\206\0\12\112\6\0\12\112"+
    "\316\0\2\3\u01a6\0\12\112\46\0\12\112\306\0\12\112"+
    "\26\0\12\112\126\0\12\112\u0196\0\12\112\6\0\u0100\3"+
    "\240\0\12\112\206\0\12\112\u012c\0\12\112\200\0\12\112"+
    "\74\0\12\112\220\0\12\112\166\0\12\112\146\0\12\112"+
    "\206\0\12\112\106\0\12\112\266\0\12\112\u0164\0\62\112"+
    "\100\0\12\112\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7424];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\2\1\3\1\1\1\4"+
    "\1\5\1\6\1\1\1\7\1\10\1\11\1\12\10\1"+
    "\1\2\4\1\1\2\4\1\1\5\1\1\1\13\2\14"+
    "\13\1\1\14\3\1\2\0\1\1\3\15\11\1\2\0"+
    "\1\2\1\1\1\15\1\1\1\15\2\1\1\0\1\2"+
    "\1\1\1\15\5\1\1\5\1\0\1\1\1\16\22\1"+
    "\1\0\1\17\1\15\7\1\2\20\2\17\2\20\2\15"+
    "\1\21\1\0\1\15\1\17\1\15\1\21\1\22\2\1"+
    "\4\0\2\1\1\16\11\1\1\23\7\1\1\21\6\1"+
    "\1\24\4\20\2\25\1\17\1\15\10\1\2\0\3\1"+
    "\1\26\11\1\1\27\1\30\1\31\5\1\1\32\2\25"+
    "\12\1\4\0\7\1\1\33\3\1\1\34\2\1\1\35"+
    "\1\36\2\1\2\0\12\1\1\37\1\1\1\40\1\1"+
    "\13\0\5\1\1\41\1\1\1\42\1\1\1\43\1\1"+
    "\1\44\1\1\14\0\2\1\1\45\2\1\1\46\1\1"+
    "\1\47\1\1\2\50\4\0\1\50\6\1\7\0\1\1"+
    "\1\51\4\1\1\0\4\1\1\52\2\1\1\53\5\1"+
    "\1\54\1\55\1\1\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u041a\0\u0339"+
    "\0\u0465\0\u0339\0\u04b0\0\u0339\0\u0339\0\u0339\0\u0339\0\u04fb"+
    "\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672\0\u06bd\0\u0708\0\u0753"+
    "\0\u079e\0\u07e9\0\u0834\0\u087f\0\u08ca\0\u0915\0\u0960\0\u09ab"+
    "\0\u09f6\0\u0a41\0\u0a8c\0\u02a3\0\u0ad7\0\u0b22\0\u0b6d\0\u0bb8"+
    "\0\u0c03\0\u0c4e\0\u0c99\0\u0ce4\0\u0d2f\0\u0d7a\0\u0dc5\0\u0e10"+
    "\0\u0e5b\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87\0\u0fd2\0\u0339\0\u101d"+
    "\0\u1068\0\u0339\0\u10b3\0\u10fe\0\u1149\0\u1194\0\u11df\0\u122a"+
    "\0\u1275\0\u12c0\0\u130b\0\u1356\0\u13a1\0\u13ec\0\u1437\0\u1482"+
    "\0\u14cd\0\u1518\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f\0\u16da"+
    "\0\u1725\0\u1770\0\u17bb\0\u1806\0\u1851\0\u189c\0\u18e7\0\u1932"+
    "\0\u197d\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f\0\u1b8a"+
    "\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97\0\u1de2"+
    "\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\u0339\0\u1f59\0\u1fa4\0\u1fef"+
    "\0\u203a\0\u2085\0\u20d0\0\u211b\0\u2166\0\u21b1\0\u21fc\0\u13ec"+
    "\0\u2247\0\u2292\0\u22dd\0\u1563\0\u2328\0\u2373\0\u0708\0\u23be"+
    "\0\u2409\0\u2454\0\u249f\0\u087f\0\u1851\0\u24ea\0\u2535\0\u2580"+
    "\0\u25cb\0\u2616\0\u2661\0\u26ac\0\u26f7\0\u0339\0\u2742\0\u278d"+
    "\0\u27d8\0\u2823\0\u286e\0\u28b9\0\u2904\0\u294f\0\u299a\0\u02a3"+
    "\0\u29e5\0\u2a30\0\u2a7b\0\u2ac6\0\u2b11\0\u2b5c\0\u2ba7\0\u02a3"+
    "\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e\0\u2d69\0\u02a3\0\u2db4"+
    "\0\u2292\0\u2dff\0\u2373\0\u23be\0\u2409\0\u2e4a\0\u2e95\0\u2ee0"+
    "\0\u2f2b\0\u2f76\0\u2fc1\0\u300c\0\u3057\0\u30a2\0\u30ed\0\u3138"+
    "\0\u3183\0\u31ce\0\u3219\0\u3264\0\u02a3\0\u32af\0\u32fa\0\u3345"+
    "\0\u3390\0\u33db\0\u3426\0\u3471\0\u34bc\0\u3507\0\u02a3\0\u02a3"+
    "\0\u02a3\0\u3552\0\u359d\0\u35e8\0\u3633\0\u367e\0\u02a3\0\u2e4a"+
    "\0\u2e95\0\u36c9\0\u3714\0\u375f\0\u37aa\0\u37f5\0\u3840\0\u388b"+
    "\0\u38d6\0\u3921\0\u396c\0\u39b7\0\u3a02\0\u3a4d\0\u3a98\0\u3ae3"+
    "\0\u3b2e\0\u3b79\0\u3bc4\0\u3c0f\0\u3c5a\0\u3ca5\0\u02a3\0\u3cf0"+
    "\0\u3d3b\0\u3d86\0\u02a3\0\u3dd1\0\u3e1c\0\u02a3\0\u02a3\0\u3e67"+
    "\0\u3eb2\0\u3efd\0\u3f48\0\u3f93\0\u3fde\0\u4029\0\u4074\0\u40bf"+
    "\0\u410a\0\u4155\0\u41a0\0\u41eb\0\u4236\0\u02a3\0\u4281\0\u02a3"+
    "\0\u42cc\0\u4317\0\u4362\0\u43ad\0\u43f8\0\u4443\0\u448e\0\u44d9"+
    "\0\u4524\0\u456f\0\u45ba\0\u4605\0\u4650\0\u469b\0\u46e6\0\u4731"+
    "\0\u477c\0\u02a3\0\u47c7\0\u02a3\0\u4812\0\u02a3\0\u485d\0\u02a3"+
    "\0\u48a8\0\u48f3\0\u493e\0\u4989\0\u49d4\0\u4a1f\0\u4a6a\0\u4ab5"+
    "\0\u4b00\0\u4b4b\0\u4b96\0\u4be1\0\u4c2c\0\u4c77\0\u4cc2\0\u02a3"+
    "\0\u4d0d\0\u4d58\0\u02a3\0\u4da3\0\u02a3\0\u4dee\0\u0339\0\u4e39"+
    "\0\u4e84\0\u4ecf\0\u4f1a\0\u4f65\0\u4fb0\0\u4ffb\0\u5046\0\u5091"+
    "\0\u50dc\0\u5127\0\u5172\0\u51bd\0\u5208\0\u5253\0\u529e\0\u52e9"+
    "\0\u5334\0\u537f\0\u53ca\0\u02a3\0\u5415\0\u5460\0\u54ab\0\u54f6"+
    "\0\u4fb0\0\u5541\0\u558c\0\u55d7\0\u5622\0\u1851\0\u566d\0\u56b8"+
    "\0\u02a3\0\u5703\0\u574e\0\u5799\0\u57e4\0\u582f\0\u02a3\0\u02a3"+
    "\0\u587a\0\u02a3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\12\1\15\1\16\1\13\1\12"+
    "\1\17\1\20\1\21\1\22\3\12\1\23\7\12\1\24"+
    "\1\25\1\26\27\12\1\27\3\12\1\30\1\31\1\12"+
    "\1\32\1\12\1\33\5\12\1\34\1\35\1\36\11\12"+
    "\1\13\1\14\1\12\1\15\1\16\1\13\1\12\1\17"+
    "\1\20\1\21\1\22\3\12\1\23\7\12\1\24\1\25"+
    "\1\26\27\12\1\27\31\12\1\37\1\13\1\14\1\37"+
    "\1\40\1\16\1\13\1\37\1\41\1\20\1\21\1\22"+
    "\3\37\1\42\7\37\1\24\1\25\1\26\27\37\1\27"+
    "\4\37\1\43\24\37\1\44\1\13\1\14\1\44\1\45"+
    "\1\16\1\13\1\44\1\46\1\20\1\21\1\22\3\44"+
    "\1\47\7\44\1\24\1\25\1\26\27\44\1\27\4\44"+
    "\1\50\24\44\1\12\1\13\1\14\1\12\1\15\1\16"+
    "\1\13\1\51\1\17\1\20\1\52\1\22\1\53\1\12"+
    "\1\54\1\23\1\55\4\56\2\55\1\24\1\25\1\26"+
    "\27\12\1\27\1\57\1\12\1\60\1\61\1\62\1\63"+
    "\2\12\1\64\1\12\1\65\1\12\1\66\4\12\1\67"+
    "\1\70\2\12\1\71\2\12\1\72\1\12\1\13\1\14"+
    "\1\12\1\73\1\16\1\13\1\12\1\17\1\20\1\21"+
    "\1\22\3\12\1\23\7\12\1\24\1\25\1\26\27\12"+
    "\1\27\22\12\1\74\7\12\1\13\1\14\1\12\1\15"+
    "\1\16\1\13\1\12\1\17\1\20\1\21\1\22\3\12"+
    "\1\23\7\12\1\24\1\25\1\26\27\12\1\27\4\12"+
    "\1\75\24\12\20\0\7\76\63\0\1\76\6\0\1\77"+
    "\104\0\1\12\2\0\2\12\2\0\2\12\3\0\13\12"+
    "\3\0\27\12\1\0\31\12\1\0\1\13\2\0\1\13"+
    "\1\0\1\13\217\0\1\12\1\13\1\0\1\12\1\15"+
    "\1\0\1\13\2\12\3\0\13\12\3\0\27\12\1\0"+
    "\31\12\2\0\1\14\110\0\1\100\1\101\1\102\2\100"+
    "\1\103\1\101\2\100\3\101\3\100\1\104\7\100\3\101"+
    "\27\100\1\101\31\100\2\21\4\0\105\21\1\12\2\0"+
    "\2\12\2\0\2\12\3\0\3\12\1\105\7\12\3\0"+
    "\27\12\1\0\32\12\2\0\2\12\2\0\2\12\3\0"+
    "\13\12\3\0\27\12\1\0\4\12\1\106\25\12\2\0"+
    "\2\12\2\0\2\12\3\0\13\12\3\0\27\12\1\0"+
    "\26\12\1\107\3\12\2\0\2\12\2\0\2\12\3\0"+
    "\13\12\3\0\27\12\1\0\12\12\1\110\17\12\2\0"+
    "\2\12\2\0\2\12\3\0\13\12\3\0\27\12\1\0"+
    "\13\12\1\111\16\12\2\0\2\12\2\0\2\12\3\0"+
    "\13\12\3\0\27\12\1\0\1\112\31\12\2\0\2\12"+
    "\2\0\2\12\3\0\13\12\3\0\27\12\1\0\23\12"+
    "\1\113\6\12\2\0\2\12\2\0\2\12\3\0\13\12"+
    "\3\0\27\12\1\0\23\12\1\114\5\12\1\37\1\115"+
    "\1\0\2\37\1\0\1\115\2\37\3\0\13\37\1\116"+
    "\2\0\27\37\1\0\32\37\1\117\1\0\1\37\1\40"+
    "\1\0\1\117\2\37\3\0\13\37\1\116\2\0\27\37"+
    "\1\0\31\37\1\120\1\121\1\102\2\120\1\103\1\121"+
    "\2\120\3\101\3\120\1\122\7\120\1\123\2\101\27\120"+
    "\1\101\31\120\1\37\1\115\1\0\2\37\1\0\1\115"+
    "\2\37\3\0\3\37\1\124\7\37\1\116\2\0\27\37"+
    "\1\0\32\37\1\115\1\0\2\37\1\0\1\115\2\37"+
    "\3\0\13\37\1\116\2\0\27\37\1\0\14\37\1\125"+
    "\14\37\1\44\2\0\2\44\1\0\1\126\2\44\3\0"+
    "\13\44\3\0\27\44\1\0\32\44\1\13\1\0\1\44"+
    "\1\45\1\0\1\127\2\44\3\0\13\44\3\0\27\44"+
    "\1\0\31\44\1\130\1\101\1\102\2\130\1\103\1\131"+
    "\2\130\3\101\3\130\1\132\7\130\3\101\27\130\1\101"+
    "\31\130\1\44\2\0\2\44\1\0\1\126\2\44\3\0"+
    "\3\44\1\133\7\44\3\0\27\44\1\0\32\44\2\0"+
    "\2\44\1\0\1\126\2\44\3\0\13\44\3\0\27\44"+
    "\1\0\14\44\1\134\14\44\1\135\2\0\2\135\2\0"+
    "\2\135\3\0\4\135\7\136\3\0\27\135\1\0\30\135"+
    "\1\136\1\21\1\52\2\0\1\137\1\0\1\52\104\21"+
    "\1\12\2\0\2\12\1\0\1\140\2\12\3\0\13\12"+
    "\3\0\27\12\1\0\32\12\2\0\2\12\1\0\1\140"+
    "\2\12\3\0\1\12\2\141\1\12\7\72\3\0\27\12"+
    "\1\0\7\12\1\142\3\12\1\142\5\12\1\142\6\12"+
    "\1\72\1\12\2\0\2\12\1\0\1\140\2\12\3\0"+
    "\1\12\2\141\1\12\7\55\3\0\27\12\1\0\7\12"+
    "\1\142\3\12\1\142\5\12\1\142\6\12\1\72\1\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\2\12\1\143\20\12\1\144\6\12\2\0\2\12"+
    "\2\0\2\12\3\0\13\12\3\0\27\12\1\0\1\145"+
    "\17\12\1\146\11\12\2\0\2\12\2\0\2\12\3\0"+
    "\13\12\3\0\27\12\1\0\1\147\7\12\1\150\12\12"+
    "\1\151\6\12\2\0\2\12\2\0\2\12\3\0\13\12"+
    "\3\0\27\12\1\0\14\12\1\152\15\12\2\0\2\12"+
    "\2\0\2\12\3\0\13\12\3\0\27\12\1\0\1\153"+
    "\31\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\14\12\1\154\15\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\15\12\1\155"+
    "\14\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\15\12\1\156\14\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\1\157\31\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\10\12\1\160\7\12\1\161\11\12\2\0\2\12"+
    "\2\0\2\12\3\0\13\12\3\0\27\12\1\0\7\12"+
    "\1\162\22\12\2\0\2\12\2\0\2\12\3\0\4\12"+
    "\7\72\3\0\27\12\1\0\7\12\1\142\3\12\1\142"+
    "\5\12\1\142\6\12\1\72\1\12\1\13\1\0\1\12"+
    "\1\73\1\0\1\13\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\32\12\2\0\2\12\2\0\2\12\3\0\13\12"+
    "\3\0\27\12\1\0\7\12\1\163\22\12\2\0\2\12"+
    "\2\0\2\12\3\0\13\12\3\0\27\12\1\0\14\12"+
    "\1\164\14\12\20\0\7\76\42\0\1\165\3\0\1\165"+
    "\5\0\1\165\6\0\1\76\1\100\1\101\1\102\2\100"+
    "\1\103\1\101\2\100\3\101\3\100\1\12\7\100\3\101"+
    "\27\100\1\101\31\100\2\101\1\102\2\101\1\103\11\101"+
    "\1\0\73\101\2\0\1\102\110\0\1\104\1\166\1\0"+
    "\2\104\1\0\1\166\2\104\3\166\13\104\3\166\27\104"+
    "\1\166\31\104\1\105\1\167\1\102\2\105\1\103\1\167"+
    "\2\105\3\167\13\105\3\167\27\105\1\167\31\105\1\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\2\12\1\170\27\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\16\12\1\171\13\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\15\12\1\172\14\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\16\12\1\173\13\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\2\12\1\174\27\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\4\12\1\175\25\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\12\12\1\176\16\12\1\0\1\115\2\0\1\115"+
    "\1\0\1\115\20\0\1\116\63\0\1\177\1\116\1\0"+
    "\1\177\1\200\1\0\1\116\2\177\3\0\13\177\3\0"+
    "\27\177\1\0\31\177\1\0\1\117\2\0\1\117\1\0"+
    "\1\117\20\0\1\116\63\0\1\120\1\121\1\102\2\120"+
    "\1\103\1\121\2\120\3\101\3\120\1\37\7\120\1\123"+
    "\2\101\27\120\1\101\31\120\1\101\1\121\1\102\1\101"+
    "\1\121\1\103\1\121\10\101\1\0\7\101\1\123\63\101"+
    "\1\122\1\201\1\0\2\122\1\0\1\201\2\122\3\166"+
    "\13\122\1\202\2\166\27\122\1\166\31\122\1\203\1\123"+
    "\1\102\1\203\1\204\1\103\1\123\2\203\3\101\3\203"+
    "\1\177\7\203\3\101\27\203\1\101\31\203\1\124\1\205"+
    "\1\102\2\124\1\103\1\205\2\124\3\167\13\124\1\206"+
    "\2\167\27\124\1\167\31\124\1\37\1\115\1\0\2\37"+
    "\1\0\1\115\2\37\3\0\13\37\1\116\2\0\27\37"+
    "\1\0\3\37\1\207\25\37\11\0\1\210\102\0\1\13"+
    "\2\0\1\13\1\0\1\13\2\0\1\210\101\0\1\130"+
    "\1\101\1\102\2\130\1\103\1\131\2\130\3\101\3\130"+
    "\1\44\7\130\3\101\27\130\1\101\31\130\2\101\1\102"+
    "\2\101\1\103\3\101\1\211\5\101\1\0\73\101\1\132"+
    "\1\166\1\0\2\132\1\0\1\212\2\132\3\166\13\132"+
    "\3\166\27\132\1\166\31\132\1\133\1\167\1\102\2\133"+
    "\1\103\1\213\2\133\3\167\13\133\3\167\27\133\1\167"+
    "\31\133\1\44\2\0\2\44\1\0\1\126\2\44\3\0"+
    "\13\44\3\0\27\44\1\0\3\44\1\214\25\44\1\135"+
    "\2\0\2\135\2\0\1\215\1\135\3\0\13\135\3\0"+
    "\27\135\1\0\32\135\2\0\2\135\2\0\1\215\1\135"+
    "\3\0\2\135\1\216\1\135\7\217\3\0\27\135\1\0"+
    "\30\135\1\217\1\0\1\137\2\0\1\137\1\0\1\137"+
    "\120\0\1\220\3\0\1\221\1\222\1\223\4\221\64\0"+
    "\1\12\2\0\2\12\2\0\2\12\3\0\4\12\1\224"+
    "\4\225\2\224\3\0\27\12\1\0\32\12\2\0\2\12"+
    "\1\0\1\226\2\12\3\0\13\12\3\0\27\12\1\0"+
    "\32\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\22\12\1\227\7\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\22\12\1\230"+
    "\7\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\12\12\1\231\17\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\15\12\1\232"+
    "\14\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\22\12\1\233\7\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\1\234\31\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\20\12\1\235\11\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\1\236\31\12\2\0"+
    "\2\12\2\0\2\12\3\0\13\12\3\0\27\12\1\0"+
    "\12\12\1\237\17\12\2\0\2\12\2\0\2\12\3\0"+
    "\13\12\3\0\27\12\1\0\22\12\1\240\7\12\2\0"+
    "\2\12\2\0\2\12\3\0\13\12\3\0\27\12\1\0"+
    "\2\12\1\241\27\12\2\0\2\12\2\0\2\12\3\0"+
    "\2\12\1\242\10\12\3\0\27\12\1\0\32\12\2\0"+
    "\2\12\2\0\2\12\3\0\13\12\3\0\27\12\1\0"+
    "\12\12\1\243\17\12\2\0\2\12\2\0\2\12\3\0"+
    "\13\12\3\0\27\12\1\0\13\12\1\244\16\12\2\0"+
    "\2\12\2\0\2\12\3\0\13\12\3\0\27\12\1\0"+
    "\23\12\1\245\6\12\2\0\2\12\2\0\2\12\3\0"+
    "\13\12\3\0\27\12\1\0\4\12\1\246\25\12\2\0"+
    "\2\12\2\0\2\12\3\0\13\12\3\0\27\12\1\0"+
    "\4\12\1\247\25\12\2\0\2\12\2\0\2\12\3\0"+
    "\13\12\3\0\27\12\1\0\3\12\1\250\25\12\2\166"+
    "\1\0\2\166\1\0\105\166\2\167\1\102\2\167\1\103"+
    "\105\167\1\12\2\0\2\12\2\0\2\12\3\0\13\12"+
    "\3\0\27\12\1\0\12\12\1\251\17\12\2\0\2\12"+
    "\2\0\2\12\3\0\13\12\3\0\27\12\1\0\1\252"+
    "\31\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\1\12\1\253\30\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\15\12\1\254"+
    "\14\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\11\12\1\255\20\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\20\12\1\256"+
    "\11\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\4\12\1\257\24\12\1\177\2\0\2\177"+
    "\2\0\2\177\3\0\13\177\3\0\27\177\1\0\31\177"+
    "\1\166\1\201\1\0\1\166\1\201\1\0\1\201\20\166"+
    "\1\202\63\166\1\260\1\202\1\0\1\260\1\261\1\0"+
    "\1\202\2\260\3\166\13\260\3\166\27\260\1\166\31\260"+
    "\1\203\1\101\1\102\2\203\1\103\1\101\2\203\3\101"+
    "\3\203\1\177\7\203\3\101\27\203\1\101\31\203\1\167"+
    "\1\205\1\102\1\167\1\205\1\103\1\205\20\167\1\206"+
    "\63\167\1\262\1\206\1\102\1\262\1\263\1\103\1\206"+
    "\2\262\3\167\13\262\3\167\27\262\1\167\31\262\1\264"+
    "\2\0\2\264\2\0\2\264\3\0\13\264\3\0\27\264"+
    "\1\0\31\264\1\265\1\101\1\102\2\265\1\103\1\101"+
    "\2\265\3\101\3\265\1\264\7\265\3\101\27\265\1\101"+
    "\31\265\2\166\1\0\2\166\1\0\3\166\1\266\101\166"+
    "\2\167\1\102\2\167\1\103\3\167\1\267\101\167\1\135"+
    "\2\0\2\135\2\0\1\215\1\135\3\0\13\135\3\0"+
    "\1\135\1\270\2\135\1\271\1\135\1\272\3\135\1\273"+
    "\1\135\1\274\1\275\1\276\2\135\1\277\5\135\1\0"+
    "\32\135\2\0\2\135\2\0\1\215\1\135\3\0\2\135"+
    "\1\216\10\135\3\0\27\135\1\0\31\135\6\0\1\300"+
    "\112\0\1\300\6\0\2\301\102\0\1\300\6\0\2\301"+
    "\1\0\7\221\72\0\1\300\6\0\2\301\1\0\4\221"+
    "\67\0\1\12\2\0\2\12\1\0\1\140\2\12\3\0"+
    "\1\12\2\141\10\12\3\0\27\12\1\0\32\12\2\0"+
    "\2\12\1\0\1\140\2\12\3\0\1\12\2\141\1\12"+
    "\7\224\3\0\27\12\1\0\32\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\10\12\1\302"+
    "\21\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\15\12\1\303\14\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\4\12\1\304"+
    "\25\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\14\12\1\305\15\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\4\12\1\306"+
    "\25\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\12\12\1\307\17\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\1\310\31\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\1\12\1\311\30\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\21\12\1\312\10\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\11\12\1\313\20\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\12\12\1\314\17\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\10\12\1\315\21\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\4\12\1\316\25\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\4\12\1\317\25\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\14\12\1\320\15\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\14\12\1\321\15\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\1\322\31\12\2\0"+
    "\2\12\2\0\2\12\3\0\13\12\3\0\27\12\1\0"+
    "\14\12\1\323\15\12\2\0\2\12\2\0\2\12\3\0"+
    "\13\12\3\0\27\12\1\0\1\324\31\12\2\0\2\12"+
    "\2\0\2\12\3\0\13\12\3\0\27\12\1\0\20\12"+
    "\1\325\11\12\2\0\2\12\2\0\2\12\3\0\13\12"+
    "\3\0\27\12\1\0\1\326\31\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\27\12\1\327"+
    "\1\12\1\260\1\166\1\0\2\260\1\0\1\166\2\260"+
    "\3\166\13\260\3\166\27\260\1\166\31\260\1\262\1\167"+
    "\1\102\2\262\1\103\1\167\2\262\3\167\13\262\3\167"+
    "\27\262\1\167\31\262\1\330\1\166\1\0\2\330\1\0"+
    "\1\166\2\330\3\166\13\330\3\166\27\330\1\166\31\330"+
    "\1\331\1\167\1\102\2\331\1\103\1\167\2\331\3\167"+
    "\13\331\3\167\27\331\1\167\31\331\1\135\2\0\2\135"+
    "\2\0\1\215\1\135\3\0\13\135\3\0\27\135\1\0"+
    "\16\135\1\332\4\135\1\333\6\135\2\0\2\135\2\0"+
    "\1\215\1\135\3\0\13\135\3\0\27\135\1\0\4\135"+
    "\1\334\25\135\2\0\2\135\2\0\1\215\1\135\3\0"+
    "\13\135\3\0\27\135\1\0\4\135\1\335\25\135\2\0"+
    "\2\135\2\0\1\215\1\135\3\0\13\135\3\0\27\135"+
    "\1\0\1\336\22\135\1\337\6\135\2\0\2\135\2\0"+
    "\1\215\1\135\3\0\13\135\3\0\27\135\1\0\1\340"+
    "\31\135\2\0\2\135\2\0\1\215\1\135\3\0\13\135"+
    "\3\0\27\135\1\0\15\135\1\341\14\135\2\0\2\135"+
    "\2\0\1\215\1\135\3\0\13\135\3\0\27\135\1\0"+
    "\2\135\1\342\27\135\2\0\2\135\2\0\1\215\1\135"+
    "\3\0\13\135\3\0\27\135\1\0\4\135\1\343\24\135"+
    "\14\0\1\344\3\0\1\345\2\346\1\347\3\345\3\0"+
    "\1\344\12\0\1\344\11\0\1\344\53\0\1\221\1\222"+
    "\1\223\4\221\64\0\1\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\24\12\1\350\5\12"+
    "\2\0\2\12\2\0\2\12\3\0\2\12\1\351\10\12"+
    "\3\0\27\12\1\0\32\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\14\12\1\352\15\12"+
    "\2\0\2\12\2\0\2\12\3\0\2\12\1\353\10\12"+
    "\3\0\27\12\1\0\32\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\4\12\1\354\25\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\22\12\1\355\7\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\12\12\1\356\17\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\4\12\1\357\25\12\2\0\2\12\2\0\2\12"+
    "\3\0\2\12\1\360\10\12\3\0\27\12\1\0\32\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\15\12\1\361\14\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\4\12\1\362\25\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\20\12\1\363\11\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\20\12\1\364\11\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\3\12\1\365\26\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\12\12\1\366\17\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\22\12\1\367\7\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\6\12\1\370\22\12"+
    "\1\135\2\0\2\135\2\0\1\215\1\135\3\0\13\135"+
    "\3\0\27\135\1\0\20\135\1\371\11\135\2\0\2\135"+
    "\2\0\1\215\1\135\3\0\13\135\3\0\27\135\1\0"+
    "\6\135\1\371\23\135\2\0\2\135\2\0\1\215\1\135"+
    "\3\0\13\135\3\0\27\135\1\0\2\135\1\371\27\135"+
    "\2\0\2\135\2\0\1\215\1\135\3\0\13\135\3\0"+
    "\27\135\1\0\1\135\1\371\30\135\2\0\2\135\2\0"+
    "\1\215\1\135\3\0\13\135\3\0\27\135\1\0\14\135"+
    "\1\371\15\135\2\0\2\135\2\0\1\215\1\135\3\0"+
    "\13\135\3\0\27\135\1\0\12\135\1\371\1\135\1\371"+
    "\15\135\2\0\2\135\2\0\1\215\1\135\3\0\13\135"+
    "\3\0\27\135\1\0\20\135\1\371\6\135\1\371\2\135"+
    "\2\0\2\135\2\0\1\215\1\135\3\0\13\135\3\0"+
    "\27\135\1\0\24\135\1\371\5\135\2\0\2\135\2\0"+
    "\1\215\1\135\3\0\13\135\3\0\27\135\1\0\22\135"+
    "\1\371\7\135\2\0\2\135\2\0\1\215\1\135\3\0"+
    "\13\135\3\0\27\135\1\0\16\135\1\371\12\135\6\0"+
    "\1\372\112\0\1\372\6\0\2\373\102\0\1\372\6\0"+
    "\2\373\1\0\7\345\72\0\1\372\6\0\2\373\1\0"+
    "\2\345\71\0\1\12\2\0\2\12\2\0\2\12\3\0"+
    "\13\12\3\0\27\12\1\0\1\374\31\12\2\0\2\12"+
    "\2\0\2\12\3\0\13\12\3\0\27\12\1\0\5\12"+
    "\1\375\24\12\2\0\2\12\2\0\2\12\3\0\13\12"+
    "\3\0\27\12\1\0\3\12\1\376\26\12\2\0\2\12"+
    "\2\0\2\12\3\0\13\12\3\0\27\12\1\0\4\12"+
    "\1\377\25\12\2\0\2\12\2\0\2\12\3\0\13\12"+
    "\3\0\27\12\1\0\2\12\1\u0100\27\12\2\0\2\12"+
    "\2\0\2\12\3\0\13\12\3\0\27\12\1\0\10\12"+
    "\1\u0101\21\12\2\0\2\12\2\0\2\12\3\0\13\12"+
    "\3\0\27\12\1\0\4\12\1\u0102\25\12\2\0\2\12"+
    "\2\0\2\12\3\0\13\12\3\0\27\12\1\0\15\12"+
    "\1\u0103\14\12\2\0\2\12\2\0\2\12\3\0\13\12"+
    "\3\0\27\12\1\0\15\12\1\u0104\14\12\2\0\2\12"+
    "\2\0\2\12\3\0\13\12\3\0\27\12\1\0\14\12"+
    "\1\u0105\15\12\2\0\2\12\2\0\2\12\3\0\13\12"+
    "\3\0\27\12\1\0\4\12\1\u0106\25\12\2\0\2\12"+
    "\2\0\2\12\3\0\13\12\3\0\27\12\1\0\4\12"+
    "\1\u0107\25\12\2\0\2\12\2\0\2\12\3\0\13\12"+
    "\3\0\27\12\1\0\4\12\1\u0108\24\12\1\135\2\0"+
    "\2\135\2\0\1\215\1\135\3\0\2\135\1\u0109\10\135"+
    "\3\0\27\135\1\0\31\135\14\0\1\u010a\3\0\1\u010b"+
    "\1\u010c\5\u010b\4\0\1\u010d\2\0\1\u010e\1\0\1\u010f"+
    "\3\0\1\u0110\1\0\1\u0111\1\u0112\1\u0113\2\0\1\u0114"+
    "\57\0\1\345\2\346\1\347\3\345\64\0\1\12\2\0"+
    "\2\12\2\0\2\12\3\0\13\12\3\0\27\12\1\0"+
    "\22\12\1\u0115\7\12\2\0\2\12\2\0\2\12\3\0"+
    "\13\12\3\0\27\12\1\0\15\12\1\u0116\14\12\2\0"+
    "\2\12\2\0\2\12\3\0\13\12\3\0\27\12\1\0"+
    "\1\u0117\31\12\2\0\2\12\2\0\2\12\3\0\13\12"+
    "\3\0\27\12\1\0\5\12\1\u0118\20\12\1\u0119\3\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\22\12\1\u011a\7\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\15\12\1\u011b\14\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\3\12\1\u011c\26\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\14\12\1\u011d\15\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\16\12\1\u011e\13\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\2\12\1\u011f\27\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\20\12\1\u0120\10\12\1\135\2\0\2\135\2\0"+
    "\1\215\1\135\3\0\4\135\7\u0121\3\0\27\135\1\0"+
    "\30\135\1\u0121\6\0\1\u0122\112\0\1\u0122\6\0\2\u0123"+
    "\102\0\1\u0122\6\0\2\u0123\1\0\3\u010b\141\0\1\u0124"+
    "\3\0\1\u0125\74\0\1\u0126\112\0\1\u0127\106\0\1\u0128"+
    "\21\0\1\u0129\70\0\1\u012a\127\0\1\u012b\77\0\1\u012c"+
    "\114\0\1\u012d\53\0\1\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\10\12\1\u012e\21\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\2\12\1\u012f\27\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\20\12\1\u0130\11\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\5\12\1\u0131\24\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\16\12\1\u0132\13\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\14\12\1\u0133\15\12\2\0\2\12\2\0\2\12"+
    "\3\0\2\12\1\u0134\10\12\3\0\27\12\1\0\32\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\4\12\1\u0135\24\12\1\135\2\0\2\135\2\0"+
    "\1\215\1\135\3\0\4\135\7\u0136\3\0\27\135\1\0"+
    "\30\135\1\u0136\14\0\1\u0137\3\0\6\u0138\4\0\1\u0137"+
    "\5\0\1\u0139\4\0\1\u0137\1\u013a\4\0\1\u013b\1\u013c"+
    "\2\0\1\u013d\53\0\1\u010b\1\u010c\5\u010b\4\0\1\u010d"+
    "\2\0\1\u010e\1\0\1\u010f\3\0\1\u0110\1\0\1\u0111"+
    "\1\u0112\1\u0113\2\0\1\u0114\111\0\1\u010b\101\0\1\u010b"+
    "\106\0\1\u010b\111\0\1\u010b\125\0\1\u010b\110\0\1\u010b"+
    "\1\0\1\u010b\115\0\1\u010b\5\0\1\u010b\110\0\1\u010b"+
    "\110\0\1\u010b\107\0\1\u010b\41\0\1\12\2\0\2\12"+
    "\2\0\2\12\3\0\13\12\3\0\27\12\1\0\15\12"+
    "\1\u013e\14\12\2\0\2\12\2\0\2\12\3\0\13\12"+
    "\3\0\27\12\1\0\23\12\1\u013f\6\12\2\0\2\12"+
    "\2\0\2\12\3\0\13\12\3\0\27\12\1\0\4\12"+
    "\1\u0140\25\12\2\0\2\12\2\0\2\12\3\0\13\12"+
    "\3\0\27\12\1\0\10\12\1\u0141\21\12\2\0\2\12"+
    "\2\0\2\12\3\0\13\12\3\0\27\12\1\0\1\u0142"+
    "\30\12\1\135\2\0\2\135\2\0\1\215\1\135\3\0"+
    "\4\135\7\u0143\3\0\27\135\1\0\30\135\1\u0143\15\0"+
    "\2\u0144\146\0\1\u0145\110\0\1\u0146\75\0\1\u0147\21\0"+
    "\1\u0146\77\0\1\u0148\12\0\1\u0149\74\0\1\u014a\53\0"+
    "\1\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\14\12\1\u014b\15\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\21\12\1\u014c"+
    "\10\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\2\12\1\u014d\27\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\20\12\1\u014e"+
    "\11\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\2\12\1\u014f\26\12\1\135\2\0\2\135"+
    "\2\0\1\215\1\135\3\0\4\135\7\u0150\3\0\27\135"+
    "\1\0\30\135\1\u0150\20\0\6\u0138\12\0\1\u0139\5\0"+
    "\1\u013a\4\0\1\u013b\1\u013c\2\0\1\u0151\76\0\1\u0138"+
    "\116\0\1\u0138\117\0\1\u0138\113\0\1\u0138\74\0\1\u0138"+
    "\111\0\1\u0138\54\0\1\12\2\0\2\12\2\0\2\12"+
    "\3\0\2\12\1\u0152\10\12\3\0\27\12\1\0\32\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\22\12\1\u0153\7\12\2\0\2\12\2\0\2\12"+
    "\3\0\13\12\3\0\27\12\1\0\4\12\1\u0154\25\12"+
    "\2\0\2\12\2\0\2\12\3\0\13\12\3\0\27\12"+
    "\1\0\22\12\1\u0155\6\12\1\135\2\0\2\135\2\0"+
    "\1\u0156\1\135\3\0\13\135\3\0\27\135\1\0\31\135"+
    "\1\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\6\12\1\u0157\23\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\10\12\1\u0158"+
    "\21\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\21\12\1\u0159\10\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\10\12\1\u015a"+
    "\21\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\20\12\1\u015b\11\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\24\12\1\u015c"+
    "\5\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\24\12\1\u015d\5\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\15\12\1\u015e"+
    "\14\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\4\12\1\u015f\25\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\4\12\1\u0160"+
    "\25\12\2\0\2\12\2\0\2\12\3\0\13\12\3\0"+
    "\27\12\1\0\23\12\1\u0161\6\12\2\0\2\12\2\0"+
    "\2\12\3\0\13\12\3\0\27\12\1\0\16\12\1\u0162"+
    "\12\12";

  private static int [] zzUnpacktrans() {
    int [] result = new int[22725];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\3\1\1\11\3\1\1\11\1\1\1\11\1\1"+
    "\4\11\46\1\1\0\1\11\2\1\1\11\12\1\2\0"+
    "\7\1\1\0\11\1\1\0\24\1\1\11\22\1\1\0"+
    "\7\1\4\0\2\1\1\11\51\1\2\0\42\1\4\0"+
    "\22\1\2\0\16\1\13\0\15\1\14\0\11\1\1\11"+
    "\1\1\4\0\7\1\7\0\6\1\1\0\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())+1];

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public DSLRLexer() {
      this((java.io.Reader)null);
    }
    private final Stack<Integer> stateStack = new Stack<>();

    private void pushState(int newState) {
        stateStack.push(newState);
        yybegin(newState);
    }

    private void popState() {
        yybegin(stateStack.pop());
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  DSLRLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return DSLRTypes.STRING_TOKEN;
            }
          // fall through
          case 47: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 48: break;
          case 3:
            { return DSLRTypes.CRLF;
            }
          // fall through
          case 49: break;
          case 4:
            { return DSLRTypes.DOLLAR;
            }
          // fall through
          case 50: break;
          case 5:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { return DSLRTypes.L_PAREN;
            }
          // fall through
          case 51: break;
          case 6:
            { return DSLRTypes.R_PAREN;
            }
          // fall through
          case 52: break;
          case 7:
            { return DSLRTypes.COLON;
            }
          // fall through
          case 53: break;
          case 8:
            { return DSLRTypes.SEMICOLON;
            }
          // fall through
          case 54: break;
          case 9:
            { return DSLRTypes.EQ;
            }
          // fall through
          case 55: break;
          case 10:
            { if (stateStack.isEmpty())
        return TokenType.BAD_CHARACTER;
    popState();
    yypushback(yylength());
            }
          // fall through
          case 56: break;
          case 11:
            { return DSLRTypes.HYPHEN;
            }
          // fall through
          case 57: break;
          case 12:
            { return DSLRTypes.NUMBER;
            }
          // fall through
          case 58: break;
          case 13:
            { yybegin(YYINITIAL);
    return DSLRTypes.COMMENT;
            }
          // fall through
          case 59: break;
          case 14:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 7;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 8;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return DSLRTypes.INT_TIMER_EXPR;
            }
          // fall through
          case 60: break;
          case 15:
            { return DSLRTypes.DEBUG;
            }
          // fall through
          case 61: break;
          case 16:
            { return DSLRTypes.DECLARE_TYPE_METADATA;
            }
          // fall through
          case 62: break;
          case 17:
            { pushState(YYINITIAL);
        return DSLRTypes.END;
            }
          // fall through
          case 63: break;
          case 18:
            { return DSLRTypes.STRING_LITERAL;
            }
          // fall through
          case 64: break;
          case 19:
            { return DSLRTypes.INT;
            }
          // fall through
          case 65: break;
          case 20:
            { pushState(RULE_HEADER);
        return DSLRTypes.RULE;
            }
          // fall through
          case 66: break;
          case 21:
            { return DSLRTypes.QUERY_ARG;
            }
          // fall through
          case 67: break;
          case 22:
            { return DSLRTypes.CRON;
            }
          // fall through
          case 68: break;
          case 23:
            { return DSLRTypes.TRUE;
            }
          // fall through
          case 69: break;
          case 24:
            { pushState(RULE_LHS);
        return DSLRTypes.WHEN;
            }
          // fall through
          case 70: break;
          case 25:
            { pushState(RULE_RHS);
        return DSLRTypes.THEN;
            }
          // fall through
          case 71: break;
          case 26:
            { pushState(QUERY);
        return DSLRTypes.QUERY;
            }
          // fall through
          case 72: break;
          case 27:
            { return DSLRTypes.FALSE;
            }
          // fall through
          case 73: break;
          case 28:
            { return DSLRTypes.TIMER;
            }
          // fall through
          case 74: break;
          case 29:
            { return DSLRTypes.GLOBAL;
            }
          // fall through
          case 75: break;
          case 30:
            { return DSLRTypes.IMPORT;
            }
          // fall through
          case 76: break;
          case 31:
            { pushState(DECLARE);
        return DSLRTypes.DECLARE;
            }
          // fall through
          case 77: break;
          case 32:
            { return DSLRTypes.PACKAGE;
            }
          // fall through
          case 78: break;
          case 33:
            { return DSLRTypes.DIALECT;
            }
          // fall through
          case 79: break;
          case 34:
            { return DSLRTypes.ENABLED;
            }
          // fall through
          case 80: break;
          case 35:
            { return DSLRTypes.NO_LOOP;
            }
          // fall through
          case 81: break;
          case 36:
            { return DSLRTypes.EXPANDER;
            }
          // fall through
          case 82: break;
          case 37:
            { return DSLRTypes.CALENDAR;
            }
          // fall through
          case 83: break;
          case 38:
            { return DSLRTypes.DURATION;
            }
          // fall through
          case 84: break;
          case 39:
            { return DSLRTypes.SALIENCE;
            }
          // fall through
          case 85: break;
          case 40:
            { return DSLRTypes.CRON_EXPR;
            }
          // fall through
          case 86: break;
          case 41:
            { return DSLRTypes.AUTO_FOCUS;
            }
          // fall through
          case 87: break;
          case 42:
            { return DSLRTypes.DATE;
            }
          // fall through
          case 88: break;
          case 43:
            { return DSLRTypes.DATE_EXPIRES;
            }
          // fall through
          case 89: break;
          case 44:
            { return DSLRTypes.DATE_EFFECTIVE;
            }
          // fall through
          case 90: break;
          case 45:
            { return DSLRTypes.LOCK_ON_ACTIVE;
            }
          // fall through
          case 91: break;
          case 46:
            { return DSLRTypes.ACTIVATION_GROUP;
            }
          // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
